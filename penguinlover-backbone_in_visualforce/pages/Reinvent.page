<apex:page controller="TemplateBuilderProxy" showHeader="false" standardstylesheets="false">
<head>
    <apex:stylesheet value="{!URLFOR($Resource.js_boost, 'bootstrap-combined.min.css')}"/>    
    <apex:stylesheet value="{!URLFOR($Resource.js_test, 'jasmine.css')}"/>
    <apex:includeScript value="{!URLFOR($Resource.js_boost, 'jquery.min.js')}"/>    
    <apex:includeScript value="{!URLFOR($Resource.js_boost, 'underscore-min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.js_boost, 'backbone.js')}"/>                        
    <apex:includeScript value="{!URLFOR($Resource.js_test, 'jasmine.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.js_test, 'jasmine-html.js')}"/>    
    <apex:includeScript value="{!URLFOR($Resource.js_boost, 'nicEdit.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.js_boost, 'spin.min.js')}"/>
    <!-- spin.js jquery extension -->
    <script>
    $.fn.spin = function(opts) {
	  this.each(function() {
	    var $this = $(this),
	        data = $this.data();
	    if (data.spinner) {
	      data.spinner.stop();
	      delete data.spinner;
	    }
	    if (opts !== false) {
	      data.spinner = new Spinner($.extend({color: $this.css('color')}, opts)).spin(this);
	    }
	  });
	  return this;
	};
    </script>
    <style>
        #evalTemplate { 
            border-bottom: 2px solid #DDD; 
            padding-bottom: 20px;
        }
        #evalTemplate div.section-header {
            font-weight: bold;
            border-bottom: 2px solid #DDD;
            padding-bottom: 5px;
        } 
        div.section > div { border-right: 1px solid #DDD; }
        div.section { 
            margin-top: 15px;
            padding: 3px;            
        }
        div.section.instruction { 
            border-radius: 4px; 
            background-color: #F8F8F8; 
            border:1px solid #DDD; 
            padding:2px;
            padding-top:2px;
        }
        div.section textarea { margin-bottom: 2px; }
        div.section > div:nth-child(2) { border-right: 0px; width: 7em; }
        div.section > div:nth-child(3) { border-left: 1px solid #DDD; padding-left: 20px; }        
        div.section > div:last-child { border-right: 0px; }
        div.section div.ctl { margin:0; text-align: center; }
        
        div.sub-section > div:first-child { text-align: right; padding-right:5px; }
        div.nicEdit-main { height: 150px; background-color: white; }
        span.rich { margin-top: 5px; }
        .label.rich, .label.simple, .label.save, i { cursor: pointer; }
        div#spinner { margin-top: 20px; margin-left:0; }
    </style>
    
    <!-- Instruction View Template -->
    <script id="tpl-1" type="text/template">
        <div class="span1"><%= idx %></div>        
        <div class="span2">
            <select style="width:100px;margin:0;">                
                <option value="inst" selected="selected">Instruction</option>
                <option value="crit">Criteria</option>                
            </select>
        </div>        
        <div class="span5">
            <textarea id="<%= 'description-' + idx %>" style="width:90%;" rows="1" placeholder="description..."><%= description %></textarea>
            <span class="label label-success save">Save</span>&nbsp;&nbsp;         
            <span class="label rich">Rich Text</span>
        </div>
        <div class="span1">&nbsp;</div>
        <div class="span1 ctl"><i class="icon-remove" title="remove"></i></div>        
        <div class="span1 ctl"><i class="icon-arrow-up" title="move up"></i></div>
        <div class="span1 ctl"><i class="icon-arrow-down" title="move down"></i></div>
        <div class="span1"><a href="#">Save</a></div>
    </script>
     
    <!-- Criteria (container for criteria and sub-criteria view) View Template -->
    <script id="tpl-2" type="text/template">
    <div class="row-fluid section criteria">
        <div class="span1"><%= idx %><i class="icon-plus" title="add sub criteria" style="float:right;padding-right:5px;"></i></div>        
        <div class="span2">
            <select style="width:100px;margin:0;">                
                <option value="inst">Instruction</option>
                <option value="crit" selected="selected">Criteria</option>                
            </select>
        </div>
        <div class="span5">
            <textarea id="<%= 'description-' + idx %>" style="width:90%;" rows="1" placeholder="description..."><%= description %></textarea>
            <span class="label label-success save">Save</span>&nbsp;&nbsp;
            <span class="label rich">Rich Text</span>
        </div>        
        <div class="span1"><strong><%= score %></strong></div>
        <div class="span1 ctl"><i class="icon-remove" title="remove"></i></div>        
        <div class="span1 ctl"><i class="icon-arrow-up" title="move up"></i></div>
        <div class="span1 ctl"><i class="icon-arrow-down" title="move down"></i></div>        
        <div class="span1"><a href="#">Save</a></div>
    </div>
    </script>
    <!-- Sub Section (Sub Criteria) View Template -->
    <script id="tpl-3" type="text/template">
        <div class="span1"><%= idx %></div>        
        <div class="span2">Sub Criteria</div>
        <div class="span5">
            <textarea id="<%= 'description-' + idx %>" style="width:90%;" rows="1" placeholder="description..."><%= description %></textarea>
            <span class="label label-success save">Save</span>&nbsp;&nbsp;
            <span class="label rich">Rich Text</span>
        </div>
        <div class="span1"><input type="text" style="width:50%;" value="<%= score %>"/></div>
        <div class="span1 ctl"><i class="icon-remove" title="remove"></i></div>
        <div class="span1 ctl"><i class="icon-arrow-up" title="move up"></i></div>
        <div class="span1 ctl"><i class="icon-arrow-down" title="move down"></i></div>
        <div class="span1"><a href="#">Save</a></div>
    </script>    
    
    <script>
        /*
         * SFSyncOverride defines database persistent methods(javascript remoting) that is going to beuserd in overriding Backbone.sync
         */
        SFSyncOverride = {
            success: function(resp){ console.log(resp) },
            error: function(){ alert('Not defined!') },             
            
            responseHandler: function(result, event){
                if (event.status) {
                    $('div#spinner').spin(false);
                    console.log("Coming from server: " + result);
                    SFSyncOverride.success(result);
                } else {
                    SFSyncOverride.error(event.message);
                }
            },
            
            ModelSync: {
                find: function(model){
                    TemplateBuilderProxy.findSection(model.get('id'), SFSyncOverride.responseHandler, {escape: true}); 
                },                
                create: function(model){
                    TemplateBuilderProxy.createSection(model.attributes, SFSyncOverride.responseHandler, {escape: true});
                },
                update: function(model){
                    TemplateBuilderProxy.updateSection(model.attributes, SFSyncOverride.responseHandler, {escape: true});
                },
                delete: function(model){
                    TemplateBuilderProxy.deleteSection(model.attributes, SFSyncOverride.responseHandler, {escape: true});                   
                }
            },
            
            CollectionSync: {
                findAll: function(templateId){
                    TemplateBuilderProxy.fetchTemplate(templateId, SFSyncOverride.responseHandler, {escape: true});                    
                }                
            }
        };
        
        /* 
         * Backbone.sync function is overridden to use Salesforce javascript remoting as data persistent strategy.
         *
         * Backbone.sync(method, model,[options]) 
         *    method – the CRUD method ("create", "read", "update", or "delete")
         *    model – the model to be saved (or collection to be read)
         *    options – success and error callbacks, and all other jQuery ajax request options
         * Use backbone default success callback, however the error handling callback is customized.         
         */
        Backbone.sync = function(method, model, options) {
            var __sfdb = SFSyncOverride;
            console.log(method);
            __sfdb.success = options.success;
            __sfdb.error = options.error || function(msg) { alert('Error: ' + msg) };
            var templateId;
            if(model.meta)
                templateId = model.meta('templateId');
            switch (method) {
                case "read":  templateId ? __sfdb.CollectionSync.findAll(templateId) : __sfdb.ModelSync.find(model); break;
                case "create":  __sfdb.ModelSync.create(model);  break;
                case "update":  __sfdb.ModelSync.update(model);  break;
                case "delete":  __sfdb.ModelSync.delete(model);  break;
            }
            $('div#spinner').spin({lines: 7, length: 5, radius: 6});
        };
    </script>
</head>

<body data-template="{!templateJSON}" data-tplid="{!templateId}" style="background-color:#FFF;">
    <div class="container">
        <!-- Evaluation Template -->
        <div class="row-fluid">            
            <div id="evalTemplate" class="row-fluid">
                <div class="row-fluid" style="margin:12px 0;">
                    <div class="span5"><h3><strong>Template Builder</strong>&nbsp;&nbsp;<span class="badge badge-important">beta</span></h3></div>
                    <div class="span3" style="float:right;margin:20px 10px 0px 0px;text-align:right;"><button id="addSection" class="btn btn-primary">Add Section</button></div> 
                    <div id="spinner" class="span1"></div>
                </div>
                <div class="row-fluid section-header">
                    <div class="span1">Section Number</div>
                    <div class="span2">Type</div>
                    <div class="span4">Section Description</div>
                    <div class="span1">Maximum Score</div>
                    <div class="span1"></div>
                    <div class="span1"></div>
                    <div class="span1"></div>
                    <div class="span1"></div>                    
                </div>
            </div>            
        </div>
        <div class="row-fluid">            
            <button id="clearTemplate" class="btn btn-primary" style="margin:10px 10px 0px 0px;">Clear All</button>        
            <button id="saveTemplate" class="btn btn-primary" style="margin-top:10px;">Save All</button>
        </div>
    </div>
    <hr />
    <!-- Backbone.js Reinvent-->    
    <script type="text/javascript">
        /* 
         * TemplateBuilder using Backbone.js
         * @Author: Qiang Han
         * 
         * Implementation Detail:
         *
         * There are two types of collections, one is introduction/criteria collection, another is sub-criteria collection
         * the sub-criteria collection will be set as an attributes of the parent criteria section.
         *
         * Re-indexing rule:
         *
         * Remove or Move Up/Down will cause a server side re-indexing of the sections within current collection.
         * If the action happend on a sub-criteria collection, then only related sub criteria sections will be 
         * re-indexed and only the related view will be re-rendered. Otherwise, all the sections will be
         * re-indexed and re-rendered. Collection will call fetch() after a server side re-indexing.
         */

        /*
         * Global namespace which holds all the modules and manages initialize/tear down of the template
         */
        var TemplateBuilder = {
            Models: {},
            Collections: {},
            Views: {},            
            init: function(){
                this.template = new this.Collections.Sections();                
                this.templateView = new this.Views.TemplateView({collection: this.template});
                this.template.meta('templateId', $('body').data('tplid'));
                this.template.reset($('body').data('template'), {silent: false});
            }
        };
        /*
         * Model#Section 
         * TemplateBuilder.Models.Section represents the actual model responsible for create/update data.
         */
        TemplateBuilder.Models.Section = Backbone.Model.extend({
            initialize: function(){
                this.on('remove', this.selfDestroy, this);
            },
            selfDestroy: function(){
                console.log("destroy: " + this.get('idx'));
            }
        });
        
        /*
         * Collection#Sections
         * A collections of sections, if this collections is not persisted yet, the _meta
         * data will be empty, otherwise, it will contain a templateId attribute.
         * When call remove from collection, set the options to { wait: true }, this will make sure
         * server indeed deleted the record.
         */
        TemplateBuilder.Collections.Sections = Backbone.Collection.extend({
            model: TemplateBuilder.Models.Section,            
            initialize: function(){ 
                this.comparator = function(section){
                    return section.get('idx');
                };
                this._meta = {}; 
            },
            meta: function(prop, value) {
                if (!prop && !value) throw new Error('Missing key and value');                
                if (value === undefined) return this._meta[prop]
		        else this._meta[prop] = value;		        
		    },
		    removeSection: function(model){
                console.log('To be deleted: ' + model.get('idx'));
                var idx = model.get('idx');
                this.each(function(section){
                    var sIdx = section.get('idx');
                    if(sIdx > idx)
                        section.set('idx', (sIdx - 1).toString());
                });
                this.remove(model);
		    },
		    moveUp: function(model){
                var idx = model.get('idx');
                var position = this.indexOf(model);
                var prevModel = this.at(position - 1);
                model.set('idx', (idx - 1).toString());
                prevModel.set('idx', idx);
                model.collection.sort({silent: true});
                // check if the index gets switched
		    },
		    moveDown: function(model){
                var idx = model.get('idx');
                var position = this.indexOf(model);
                var nextModel = this.at(position + 1);
                model.set('idx', (parseInt(idx) + 1).toString());
                nextModel.set('idx', idx);
                model.collection.sort({silent: true});
		    }
        });
        
        /*
         * Collection#SubSections 
         * A collection of sections of sub-criteria type
         */
        TemplateBuilder.Collections.SubSections = Backbone.Collection.extend({
            model: TemplateBuilder.Models.Section,
            initialize: function(){
                this.comparator = function(section){
                    return section.get('idx');
                };
            },
            removeSection: function(model){
                console.log('To be deleted: ' + model.get('idx'));
                var idx = model.get('idx');
                this.each(function(section){
                    var sIdx = section.get('idx');
                    if(sIdx > idx)
                        var lastIdx = sIdx.slice(-1) - 1; 
                        section.set('idx', sIdx.slice(0, -1) + (lastIdx == 0 ? '' : lastIdx));
                });
                this.remove(model);
            },
            moveUp: function(model){
                var idx = model.get('idx');
                var position = this.indexOf(model);
                var prevModel = this.at(position - 1);
                console.log("sub section idx: " + idx);
                console.log(idx.slice(0, -1) + (idx.slice(-1) - 1));
                model.set('idx', idx.slice(0, -1) + (idx.slice(-1) - 1));
                prevModel.set('idx', idx);
                model.collection.sort({silent: true});
            },
            moveDown: function(model){
                var idx = model.get('idx');
                var position = this.indexOf(model);
                var nextModel = this.at(position + 1);
                model.set('idx',  idx.slice(0, -1) + (parseInt(idx.slice(-1)) + 1));
                nextModel.set('idx', idx);
                model.collection.sort({silent: true});
            }
        });
        
        /*
         * View#BaseView
         * This is the parent view of all the individual section view.
         */
        TemplateBuilder.Views.BaseView = Backbone.View.extend({            
            events: { 
                'click span.rich': 'useRichText',
                'click span.simple': 'rich2Simple',
                'click span.save': 'saveDescription',
                'click i.icon-remove': 'removeSection',
                'click i.icon-arrow-up': 'moveUp',
                'click i.icon-arrow-down': 'moveDown',
                'change select': 'changeType'                                    
            },            
            useRichText: function(event){
                var id = this.$('textarea').attr('id');                                 
                this.textEditor = new nicEditor({iconsPath: '{!URLFOR($Resource.js_boost, "nicEditorIcons.gif")}'}).panelInstance(id);                                  
                $(event.target).replaceWith('<span class="label simple">Simple Text</span>');
                event.stopPropagation();
            },
            rich2Simple: function(event){                                   
                var id = this.$('textarea').attr('id');
                this.textEditor.removeInstance(id);
                $(event.target).replaceWith('<span class="label rich">Rich Text</span>');
                event.stopPropagation();
            },
            saveDescription: function(event){
                this.model.set('description', this.$('textarea').text());
                this.model.save();
                event.stopPropagation();
            },
            changeType: function(event){
                // need to change model in collection too!
                // instruction -> criteria
                // criteria -> instruction
                if($(event.target).val() == 'crit'){
                    var criteria = new TemplateBuilder.Models.Section(_.extend(this.model.attributes, {type: 'Criteria', score: ''}));
                    this.model.collection.add(criteria);
                    this.model.collection.remove(this.model);                    
                    var criteriaView = new TemplateBuilder.Views.CriteriaView({model: criteria});
                    this.$el.replaceWith(criteriaView.render().el);
                    this.leave();
                    // sync: criteria.save()
                } else {
                    var instruction = new TemplateBuilder.Models.Section(_.extend(_.pick(this.model.attributes, 'id', 'idx', 'description'), {type: 'Instruction'}));
                    this.model.collection.add(instruction);
                    this.model.collection.remove(this.model);
                    var instructionView = new TemplateBuilder.Views.InstructionView({model: instruction});
                    this.$el.replaceWith(instructionView.render().el);
                    this.leave();
                    // sync: instruction.save()
                }
            },
            removeSection: function(event){
                console.log("remove section");                
                event.stopPropagation();
                this.model.collection.removeSection(this.model);
                this.leave();
            },
            moveUp: function(event){
                console.log(this.model);
                var idx = this.model.get('idx');
                console.log("move up: " + idx);
                if(idx.slice(-1) == 1){
                    alert("Already top section.");
                } else {
                    this.model.collection.moveUp(this.model);
                    var $prevSection = this.$el.prev('div.row-fluid');
                    this.leave();
                    $prevSection.before(this.render().el);                    
                    // restore the event binding
                    if(this.renderProxy) {
                        this.model.on('change', this.renderProxy, this);
                    } else {
                        this.model.on('change', this.render, this);
                    }
                    this.delegateEvents();
                }
                event.stopPropagation();
            },
            moveDown: function(event){
                var idx = this.model.get('idx');
                console.log("move down: " + idx);
                if(idx.slice(-1) == this.model.collection.length){
                    alert("Already bottom section.");
                } else {
                    this.model.collection.moveDown(this.model);
                    var $nextSection = this.$el.next('div.row-fluid');
                    this.leave();
                    $nextSection.after(this.render().el);
                    if(this.renderProxy) {
                        this.model.on('change', this.renderProxy, this);
                    } else {
                        this.model.on('change', this.render, this);
                    }
                    this.delegateEvents();
                }
                event.stopPropagation();
            },
            leave: function(){
                if(this.collection) this.collection.off();
                this.model.off();
                this.remove();
            }
        });
        
        /*
         * View#InstructionView
         */
        TemplateBuilder.Views.InstructionView = TemplateBuilder.Views.BaseView.extend({
            className: 'row-fluid section instruction',
            template: _.template($('#tpl-1').html()),
            initialize: function(){                
                this.model.on('change', this.render, this);
            },
            render: function(){
                this.$el.html(this.template(this.model.toJSON()));
                return this;
            }
        });

        /*
         * View#CriteriaView
         * TemplateBuilder.Views.CriteriaView is a composite view
         */
        TemplateBuilder.Views.CriteriaView = TemplateBuilder.Views.BaseView.extend({
            className: 'row-fluid',
            template: _.template($('#tpl-2').html()),
            initialize: function(){
                this.collection = new TemplateBuilder.Collections.SubSections(this.model.attributes.subSections);                
                this.model.set('subSections', undefined);
                this.model.on('change', this.renderProxy, this);
                _.bindAll(this, 'appendSubCriteria');
            },
            events: function(){
                return _.extend({}, TemplateBuilder.Views.BaseView.prototype.events, {
                    'click i.icon-plus': 'addSubCriteria'
                });
            },
            render: function(){
                this.$el.html(this.template(this.model.toJSON()));
                this.collection.each(this.appendSubCriteria);
                return this;
            },
            renderProxy: function(){
                if(this.model.hasChanged('idx')){
                    var goDown = this.model.previous('idx') > this.model.get('idx') ? true : false;
                    this.collection.each(function(subCriteria){
                        var subIdx = subCriteria.get('idx');
                        // do not fire 'change' event on each of the sub-criteria views since the re-rendering is handled by this view
                        if(goDown){
                            subCriteria.set('idx', (subIdx[0] - 1) + '.' + subIdx.slice(2), {silent: true});
                        } else {
                            subCriteria.set('idx', (parseInt(subIdx[0]) + 1) + '.' + subIdx.slice(2), {silent: true});
                        }
                    });
                }
                this.render();
                return this;
            },
            appendSubCriteria: function(subCriteria){
                var view = new TemplateBuilder.Views.SubCriteriaView({model: subCriteria});
                this.$el.append(view.render().el);
            },
            addSubCriteria: function(){
                var newSubSection = new TemplateBuilder.Models.Section({ 
                    type: 'Sub Criteria',
                    idx: this.model.get('idx') + '.' + (this.collection.size() + 1),
                    description: '',
                    score: ''
                });
                this.collection.push(newSubSection);
                this.appendSubCriteria(newSubSection);
                // sync: newSubSection.save()
            }
        });
        
        /*
         * View#SubCriteriaView
         */
        TemplateBuilder.Views.SubCriteriaView = TemplateBuilder.Views.BaseView.extend({
            className: 'row-fluid section sub-section',
            template: _.template($('#tpl-3').html()),
            initialize: function(){
                this.model.on('change', this.render, this);
            },
            render: function(){
                this.$el.html(this.template(this.model.toJSON()));
                return this;
            }
        });
        
        /*
         * View#TemplateView
         * TemplateBuilder.Views.TemplateView holds all the sections views
         */
        TemplateBuilder.Views.TemplateView = Backbone.View.extend({
            id: 'templateSections',
            className: 'row-fluid',
            
            initialize: function(){
                _.bindAll(this, 'appendSection', 'addSection');
                $('button#addSection').on('click', this.addSection);
                this.collection.on('reset', this.render, this);
                this.render();
            },
            
            render: function(){
                this.collection.each(this.appendSection);
                $('div#evalTemplate').append(this.el);
            },
            
            appendSection: function(section){
                var view;                
                if(section.get('type') == 'Criteria'){
                    view = new TemplateBuilder.Views.CriteriaView({model: section});
                } else {
                    view = new TemplateBuilder.Views.InstructionView({model: section});
                }                
                this.$el.append(view.render().el);
            },
            addSection: function(){                
                var newSection = new TemplateBuilder.Models.Section({ 
                    type: 'Instruction', 
                    idx: (this.collection.size() + 1).toString(),
                    description: ''
                });
                // sync: newSection.save()
                newSection.save();
                this.collection.push(newSection);
                this.appendSection(newSection);
            },
            leave: function(){
                this.collection.off();
                this.remove();                
            }
        });                                   
    </script>
    <div id="test-data" data-template="{!templateJSON}" data-tplid="{!templateId}" style="display:none;"></div>
    <script>
        /*
         * Test Specs
         */
        describe("TemplateBuilder", function(){
            TB = TemplateBuilder;
            var template; 
            var templateView;
            
            beforeEach(function(){
                template = new TB.Collections.Sections();
                templateView = new TB.Views.TemplateView({collection: template});
            });
            
            describe("Add/Remove sections/sub-sections", function(){
                xdescribe("add behavior", function(){
                    it("should create a instruction section and with correct idx value", function(){
                        $("button#addSection").trigger('click');
                        expect($("div.instruction").length).toBe(1);
                        expect($("div.instruction:last > div.span1:first").text()).toEqual('1');
                        $("button#addSection").trigger('click');
                        expect($("div.instruction").length).toBe(2);                        
                        expect($("div.instruction:last > div.span1:first").text()).toEqual('2');
                    });
                    it("should create sub-criterias with correct idx value", function(){
	                    $("button#addSection").trigger('click');
	                    $("div.instruction:last select").val('crit');
	                    $("div.instruction:last select").trigger('change'); 
	                    var addButton = $("div.section:first i.icon-plus");
	                    addButton.trigger('click');
	                    expect($("div.sub-section:last > div.span1").text()).toMatch(/1\.1/);
	                    addButton.trigger('click');
	                    expect($("div.sub-section:last > div.span1").text()).toMatch(/1\.2/);
	                });
                });
                
                describe("Move up/down", function(){
                    beforeEach(function(){
                        template.meta('templateId', $('div#test-data').data('tplid'));
                        template.reset($('div#test-data').data('template'), {silent: false});
                    });
                    it("should move instruction up", function(){
                        $("div.instruction:last i.icon-arrow-up").trigger('click');
                        expect($("div.instruction:last div.span1:first").text()).toMatch(/2/);
                        expect($("div.section:eq(2) div.span1:first").text()).toMatch(/3/);
                        expect($("div.sub-section:first div.span1:first").text()).toMatch(/3\.1/);
                    });
                    it("should move instruction down", function(){
                        $("div.instruction:first i.icon-arrow-down").trigger('click');
                        expect($("div.instruction:first div.span1:first").text()).toMatch(/2/);
                        expect($("div.section:first div.span1:first").text()).toMatch(/1/);
                        expect($("div.sub-section:first div.span1:first").text()).toMatch(/1\.1/);
                    });
                    it("should move sub-criteria up", function(){
                        var text = $("div.sub-section:eq(1) textarea").text();
                        $("div.sub-section:eq(1) i.icon-arrow-up").trigger('click');
                        expect($("div.sub-section:first textarea").text()).toMatch(text);
                    });
                    it("should move sub-criteria down", function(){
                        var text = $("div.sub-section:eq(1) textarea").text();
                        $("div.sub-section:eq(0) i.icon-arrow-down").trigger('click');
                        expect($("div.sub-section:first textarea").text()).toMatch(text);
                    });
                    it("should move criteria and its sub-criterias up", function(){
                        $("div.criteria:last i.icon-arrow-up").trigger('click');                        
                        expect($("div.criteria:last div.span1:first").text()).toMatch(/3/);
                        expect($("div.sub-section:last div.span1:first").text()).toMatch(/3\./);
                        expect($("div.instruction:last div.span1:first").text()).toMatch(/4/);  
                    });
                });
                
                describe("remove behavior", function(){
                    beforeEach(function(){
                        template.meta('templateId', $('div#test-data').data('tplid'));
                        template.reset($('div#test-data').data('template'), {silent: false});
                    });
                    describe("remove instruction", function(){
                        it("should remove instruction correctly", function(){
                            $("div.instruction:first i.icon-remove").trigger('click');
                            expect(template.length).toBe(3);
                            expect($('div.instruction').length).toBe(1);
                            expect($("div.section:first div.span1:first").text()).toMatch("1");                           
                        }); 
                    });
                    describe("remove criteria", function(){
                        it("should remove criteria correctly", function(){
                            $("div.section:eq(1) i.icon-remove").trigger('click');
                            expect(template.length).toBe(3);
                            expect($("div.section").length).toBe(6);
                            expect($("div.section:first div.span1:first").text()).toMatch("1");
                            expect($("div.section:eq(1) div.span1:first").text()).toMatch("2");
                        });
                    });
                    describe("remove sub-criteria", function(){
                        it("should remove sub-criteria correctly", function(){
                            $("div.sub-section:first i.icon-remove").trigger('click');                            
                            expect($("div.sub-section").length).toBe(4);
                            expect($("div.sub-section:first div.span1:first").text()).toMatch("1");
                        });
                    });
                    // sepcial case
                    describe("switch from instruction to criteria and then remove", function(){
                        it("should still work", function(){
                            $("div.instruction:first select").val('crit');
                            $("div.instruction:first select").trigger('change');
                            $("div.section:first i.icon-remove").trigger('click');
                            expect(template.length).toBe(3);
                            expect($("div.section:first div.span1:first").text()).toMatch("1");
                        });
                    });
                });
            });
            
            describe("Section View", function(){
                beforeEach(function(){
                    for(var i = 1; i <= 4; i++){
                        $("button#addSection").trigger('click');
                        if(i%2 == 0){
                            $("div.instruction:last select").val('crit');
                            $("div.instruction:last select").trigger('change');
                        }
	                    $('div.section:last textarea').text('Message ' + i);
	                    $('div.section:last span.save').trigger('click');
	                }
                });
                describe("Switching section type", function(){
                    it("should create a criteria section by selecting criteria as dropdown value", function(){
	                   
	                    $("div.instruction:first select").val('crit');
	                    $("div.instruction:first select").trigger('change');
	                    
	                    expect($("div.instruction").length).toBe(1);
	                    expect($("div.section").length).toBe(4);
	                    
	                    expect($("div.section:first > div.span1").text()).toMatch(/1/);
	                    expect($("div.section:first textarea").text()).toMatch(/Message 1/);
                    });
                    
                    it("should create a instruction section by selecting instruction as dropdown value", function(){
                        $("div.section:eq(1) select").val('inst');
                        $("div.section:eq(1) select").trigger('change');
                        
                        expect($("div.instruction").length).toBe(3);
                        expect($("div.section").length).toBe(4);
                        
                        expect($("div.section:eq(1) > div.span1").text()).toMatch(/2/);
                        expect($("div.section:eq(1) textarea").text()).toMatch(/Message 2/);
                    });
                    
                    describe("Switch from criteria to instruction if criteria has sub criterias", function(){
                        it("should remove all sub-criteria's and replace with instruction section", function(){
                            var lastCriteria = $("div.section:last");
                            var addButton = $("div.section:last i.icon-plus");
                            addButton.trigger('click');
                            addButton.trigger('click');
                            lastCriteria.find('select').val('inst');
                            lastCriteria.find('select').trigger('change');
                                                        
                            expect($("div.instruction").length).toBe(3);                            
                            expect($("div.section:last textarea").text()).toMatch(/Message 4/);                            
                            expect($("div.section:last > div.span1").text()).toMatch(/4/);
                        });
                    });
                });
            });
            
            describe("TemplateBuilder initialization process", function(){                
                describe("init function", function(){
                    it("should ceate template view, sections(template) collection", function(){                        
                        expect(templateView.collection).toEqual(template);                        
                    });
                    
                    it("should load data from html5 data attribute", function(){                                                
                        template.meta('templateId', $('div#test-data').data('tplid'));
                        template.reset($('div#test-data').data('template'), {silent: false});                        
                        expect($('div.section').length).toBe(9);
                        expect($('div.instruction:first textarea').text()).toEqual('<b>give it a try</b>');                        
                    });
                });
            });
            
            describe("Backbone sync override with Salesforce js remoting", function(){
                // Unit Test! Stub all ajax calls.
                
                describe("TemplateBuilder.Collections.Sections sync override", function(){                    
                    beforeEach(function(){
                        spyOn(SFSyncOverride.CollectionSync, 'findAll');
                    });
                    
                    it("should call SFSyncOverride::CoolectionSync#findAll when fetch from template (sections) collection", function(){
                        template.meta('templateId', 'TPL-001');
                        template.fetch({silent: false});
                        expect(SFSyncOverride.CollectionSync.findAll).toHaveBeenCalledWith('TPL-001');
                    });
                });
                
                describe("TemplateBuilder.Models.Section (Instruction/Criteria/Sub-Criteria model) sync override", function(){
                    var attrs = [{id: 'sec1', idx: '1',  description: 'You need to do this and that.'},
                                 {id: 'sec2', idx: '2', description: 'At least 18 older, without disease.', score: '60'}];
                    var instructon = new TB.Models.Section(attrs[0]);
                    var criteria = new TB.Models.Section(attrs[1]);
                    // sub-criteria same as criteria
                    
                    beforeEach(function(){
                        _.each(['find', 'create', 'update', 'delete'], function(mthd){
                            spyOn(SFSyncOverride.ModelSync, mthd);
                        });
                    });
                    
                    it("should call SFSyncOverride::ModelSync#find when fetch from an existing criteria/sub-criteria/instruction", function(){
                        criteria.fetch();
                        expect(SFSyncOverride.ModelSync.find).toHaveBeenCalledWith(criteria);
                    });
                    
                    it("should call SFSyncOverride::ModelSync#create when create new criteria/sub-criteria/instruction", function(){
                        var newAttrs = {idx: '3', description: 'I am new.'}
                        var newCriteria = new TB.Models.Section(newAttrs);
                        newCriteria.save();
                        expect(SFSyncOverride.ModelSync.create).toHaveBeenCalledWith(newCriteria);
                    });
                    
                    it("should call SFSyncOverride::ModelSync#update when set and save new attributes", function(){
                        var updatedAttrs = _.extend(attrs[1], {description: 'a quick brown fox.', score: '80'});
                        criteria.set(updatedAttrs);
                        criteria.save();
                        expect(SFSyncOverride.ModelSync.update).toHaveBeenCalledWith(criteria);                        
                    });
                });
            });
            it("always works", function(){
                expect(true).toBe(true);
            });
            afterEach(function(){
                templateView.leave();
            });
        });
    </script>
        
    <script>
        (function() {
            var jasmineEnv = jasmine.getEnv();
            jasmineEnv.updateInterval = 1000;

            var htmlReporter = new jasmine.HtmlReporter();
            
            jasmineEnv.addReporter(htmlReporter);
            
            jasmineEnv.specFilter = function(spec) {
                return htmlReporter.specFilter(spec);
            };

            var currentWindowOnload = window.onload;
            
            window.onload = function() {
                if (currentWindowOnload) {
                    currentWindowOnload();
                }
                execJasmine();
            };

            function execJasmine() {
                jasmineEnv.execute();
            }
        })();
    </script>
    
</body>
</apex:page>
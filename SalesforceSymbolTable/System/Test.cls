// Generated by Illuminated Cloud on Tue Feb 14 12:00:53 IST 2017. Do not edit.

global class /*System.*/Test 
{
    global Test()
    {
    }

    global Object clone()
    {
    }

    global static Object createStub(Type parentType, StubProvider stubProvider)
    {
    }

    global static List<Id> enqueueBatchJobs(Integer n)
    {
    }

    global static List<Id> getFlexQueueOrder()
    {
    }

    global static Id getStandardPricebookId()
    {
    }

    global static Object invokeContinuationMethod(Object controller, Continuation continuation)
    {
    }

    global static Object invokePage(PageReference p)
    {
    }

    global static Boolean isRunningTest()
    {
    }

    global static List<SObject> loadData(SObjectType sobjectType, String staticResourceName)
    {
    }

    global static QuickAction.SendEmailQuickActionDefaults newSendEmailQuickActionDefaults(Id contextId, Id replyToId)
    {
    }

    global static void setContinuationResponse(String label, HttpResponse response)
    {
    }

    global static void setCreatedDate(Id id, Datetime dt)
    {
    }

    global static void setCurrentPage(Object pageReference)
    {
    }

    global static void setCurrentPageReference(Object pageReference)
    {
    }

    global static void setFixedSearchResults(List<String> searchResultsIds)
    {
    }

    global static void setMock(Type interfaceType, Object mock)
    {
    }

    global static void setReadOnlyApplicationMode(Boolean readOnlyApplicationMode)
    {
    }

    global static void startTest()
    {
    }

    global static void stopTest()
    {
    }

    global static void testInstall(InstallHandler script, Version version, Boolean isPush)
    {
    }

    global static void testInstall(InstallHandler script, Version version)
    {
    }

    global static void testSandboxPostCopyScript(SandboxPostCopy script, Id organizationId, Id sandboxId, String sandboxName)
    {
    }

    global static void testUninstall(UninstallHandler script)
    {
    }
}
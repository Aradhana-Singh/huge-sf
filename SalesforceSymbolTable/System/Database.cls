// Generated by Illuminated Cloud on Tue Feb 14 12:00:53 IST 2017. Do not edit.

global class /*System.*/Database 
{
    global static Database.LeadConvertResult convertLead(Database.LeadConvert leadConvert, Boolean DmlOptions)
    {
    }

    global static Database.LeadConvertResult convertLead(Database.LeadConvert leadConvert)
    {
    }

    global static List<Database.LeadConvertResult> convertLead(List<Database.LeadConvert> leadConverts, Boolean DmlOptions)
    {
    }

    global static List<Database.LeadConvertResult> convertLead(List<Database.LeadConvert> leadConverts)
    {
    }

    global static Integer countQuery(String query)
    {
    }

    global static Database.DeleteResult delete(Id id, Boolean allOrNothing)
    {
    }

    global static Database.DeleteResult delete(Id id)
    {
    }

    global static List<Database.DeleteResult> delete(List<Id> ids, Boolean allOrNothing)
    {
    }

    global static List<Database.DeleteResult> delete(List<Id> ids)
    {
    }

    global static List<Database.DeleteResult> delete(List<SObject> sobjects, Boolean allOrNothing)
    {
    }

    global static List<Database.DeleteResult> delete(List<SObject> sobjects)
    {
    }

    global static Database.DeleteResult delete(SObject sobject, Boolean allOrNothing)
    {
    }

    global static Database.DeleteResult delete(SObject sobject)
    {
    }

    global static List<Database.DeleteResult> deleteAsync(List<SObject> sobjects, Database.AsyncDeleteCallback callback)
    {
    }

    global static List<Database.DeleteResult> deleteAsync(List<SObject> sobjects)
    {
    }

    global static Database.DeleteResult deleteAsync(SObject sobject, Database.AsyncDeleteCallback callback)
    {
    }

    global static Database.DeleteResult deleteAsync(SObject sobject)
    {
    }

    global static List<Database.DeleteResult> deleteImmediate(List<SObject> sobjects)
    {
    }

    global static Database.DeleteResult deleteImmediate(SObject sobject)
    {
    }

    global static List<Database.EmptyRecycleBinResult> emptyRecycleBin(List<Id> ids)
    {
    }

    global static List<Database.EmptyRecycleBinResult> emptyRecycleBin(List<SObject> sobjects)
    {
    }

    global static Database.EmptyRecycleBinResult emptyRecycleBin(SObject sobject)
    {
    }

    global static String executeBatch(Database.Batchable batchable, Integer batchSize)
    {
    }

    global static String executeBatch(Database.Batchable batchable)
    {
    }

    global static Database.DeleteResult getAsyncDeleteResult(Database.DeleteResult deleteResult)
    {
    }

    global static Database.DeleteResult getAsyncDeleteResult(String asyncLocator)
    {
    }

    global static String getAsyncLocator(Object result)
    {
    }

    global static Database.SaveResult getAsyncSaveResult(Database.SaveResult saveResult)
    {
    }

    global static Database.SaveResult getAsyncSaveResult(String asyncLocator)
    {
    }

    global static Database.GetDeletedResult getDeleted(String sobjectType, Datetime startDate, Datetime endDate)
    {
    }

    global static Database.QueryLocator getQueryLocator(List<SObject> query)
    {
    }

    global static Database.QueryLocator getQueryLocator(String query)
    {
    }

    global static Database.GetUpdatedResult getUpdated(String sobjectType, Datetime startDate, Datetime endDate)
    {
    }

    global static List<Database.SaveResult> insert(List<SObject> sobjects, Boolean DmlOptions)
    {
    }

    global static List<Database.SaveResult> insert(List<SObject> sobjects)
    {
    }

    global static Database.SaveResult insert(SObject sobject, Boolean DmlOptions)
    {
    }

    global static Database.SaveResult insert(SObject sobject)
    {
    }

    global static List<Database.SaveResult> insertAsync(List<SObject> sobjects, Database.AsyncInsertCallback callback)
    {
    }

    global static List<Database.SaveResult> insertAsync(List<SObject> sobjects)
    {
    }

    global static Database.SaveResult insertAsync(SObject sobject, Database.AsyncInsertCallback callback)
    {
    }

    global static Database.SaveResult insertAsync(SObject sobject)
    {
    }

    global static List<Database.SaveResult> insertImmediate(List<SObject> sobjects)
    {
    }

    global static Database.SaveResult insertImmediate(SObject sobject)
    {
    }

    global static Database.MergeResult merge(SObject master, Id duplicate, Boolean allOrNothing)
    {
    }

    global static Database.MergeResult merge(SObject master, Id duplicate)
    {
    }

    global static List<Database.MergeResult> merge(SObject master, List<Id> duplicates, Boolean allOrNothing)
    {
    }

    global static List<Database.MergeResult> merge(SObject master, List<Id> duplicates)
    {
    }

    global static List<Database.MergeResult> merge(SObject master, List<SObject> duplicates, Boolean allOrNothing)
    {
    }

    global static List<Database.MergeResult> merge(SObject master, List<SObject> duplicates)
    {
    }

    global static Database.MergeResult merge(SObject master, SObject duplicate, Boolean allOrNothing)
    {
    }

    global static Database.MergeResult merge(SObject master, SObject duplicate)
    {
    }

    global static List<SObject> query(String query)
    {
    }

    global static void rollback(Savepoint savepoint)
    {
    }

    global static Savepoint setSavepoint()
    {
    }

    global static Database.UndeleteResult undelete(Id id, Boolean allOrNothing)
    {
    }

    global static Database.UndeleteResult undelete(Id id)
    {
    }

    global static List<Database.UndeleteResult> undelete(List<Id> ids, Boolean allOrNothing)
    {
    }

    global static List<Database.UndeleteResult> undelete(List<Id> ids)
    {
    }

    global static List<Database.UndeleteResult> undelete(List<SObject> sobjects, Boolean allOrNothing)
    {
    }

    global static List<Database.UndeleteResult> undelete(List<SObject> sobjects)
    {
    }

    global static Database.UndeleteResult undelete(SObject sobject, Boolean allOrNothing)
    {
    }

    global static Database.UndeleteResult undelete(SObject sobject)
    {
    }

    global static List<Database.SaveResult> update(List<SObject> sobjects, Boolean allOrNothing)
    {
    }

    global static List<Database.SaveResult> update(List<SObject> sobjects)
    {
    }

    global static Database.SaveResult update(SObject sobject, Boolean allOrNothing)
    {
    }

    global static Database.SaveResult update(SObject sobject)
    {
    }

    global static List<Database.SaveResult> updateAsync(List<SObject> sobjects, Database.AsyncUpdateCallback callback)
    {
    }

    global static List<Database.SaveResult> updateAsync(List<SObject> sobjects)
    {
    }

    global static Database.SaveResult updateAsync(SObject sobject, Database.AsyncUpdateCallback callback)
    {
    }

    global static Database.SaveResult updateAsync(SObject sobject)
    {
    }

    global static List<Database.SaveResult> updateImmediate(List<SObject> sobjects)
    {
    }

    global static Database.SaveResult updateImmediate(SObject sobject)
    {
    }

    global static List<Database.UpsertResult> upsert(List<SObject> sobjects, Boolean allOrNothing)
    {
    }

    global static List<Database.UpsertResult> upsert(List<SObject> sobjects, SObjectField field, Boolean allOrNothing)
    {
    }

    global static List<Database.UpsertResult> upsert(List<SObject> sobjects, SObjectField field)
    {
    }

    global static List<Database.UpsertResult> upsert(List<SObject> sobjects)
    {
    }

    global static Database.UpsertResult upsert(SObject sobject, Boolean allOrNothing)
    {
    }

    global static Database.UpsertResult upsert(SObject sobject, SObjectField field, Boolean allOrNothing)
    {
    }

    global static Database.UpsertResult upsert(SObject sobject, SObjectField field)
    {
    }

    global static Database.UpsertResult upsert(SObject sobject)
    {
    }
}